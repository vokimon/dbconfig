#!/usr/bin/env python3

from dbconfig import *
import unittest

class test_dbconfig(unittest.TestCase):

	mandatoryKeys = [
		'username',
		'database',
		'password',
		]

	def addFile(self, file) :
		self.toRemove.append(file)

	def setUp(self) :
		self.toRemove=[]
		self.data = namespace(
			default = namespace(
				(key, 'my'+key) for key in self.mandatoryKeys),
			alternative=namespace(
				(key, 'other'+key) for key in self.mandatoryKeys),
			)
		self.data.dump('config.yaml')
		self.addFile('config.yaml')
		self.oldEnviron = os.environ.copy()

	def tearDown(self):
		for f in self.toRemove:
			try: os.unlink(f)
			except FileNotFoundError: pass
		os.environ.clear()
		os.environ.update(self.oldEnviron)

	def test_dbconfig_notExistingConfigFile_generatesAnUnsetOne(self) :
		self.addFile('nonexistingconfig')
		with self.assertRaises(MissingValue) :
			dbconfig(configfile='nonexistingconfig')
		autogenerated = namespace.load('nonexistingconfig')
		self.assertDictEqual(
			dict(
				default=dict(
					username=None,
					database=None,
					password=None,
				)),
			autogenerated)

	def test_dbconfig_takesDefaultProfile(self) :
		config=dbconfig(configfile='config.yaml')
		self.assertDictEqual(config, self.data.default)

	def test_dbconfig_explicitProfile_takesAlternativeData(self) :
		config=dbconfig(profile='alternative',configfile='config.yaml')
		self.assertDictEqual(config, self.data.alternative)

	def test_dbconfig_badProfile(self) :
		with self.assertRaises(BadProfile) as e:
			dbconfig(profile='badprofile',configfile='config.yaml')
		self.assertEqual(str(e.exception.args[0]),
			"Database profile 'badprofile' not availabe in 'config.yaml', "
			"try with: alternative, default"
			)

	def test_dbconfig_environment_takesAlternativeData(self) :
		os.environ['SE_DATABASE']='alternative'
		config=dbconfig(configfile='config.yaml')
		self.assertDictEqual(config, self.data.alternative)

	def test_defaultDbConfigFile_linux(self) :
		self.assertEqual(
			os.path.join(
				os.environ['HOME'],
				'.config',
#				'somenergia',
				'dbconfig',
				'1.0',
				'dbconfig.yaml',
			),
			defaultDbConfigFile())


if __name__ == '__main__':
	import sys
	sys.exit(unittest.main())


