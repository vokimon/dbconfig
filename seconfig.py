#!/usr/bin/env python3

from namespace import namespace
"""
TODO:
- Detectar que no existe en el path
- Generar uno vacio
- Test default path on windows
- Test default path on mac 
- Getting a missing profile
- Any attribute is null
"""
import os
from consolemsg import error


# Kludge in order to use FileNotFoundError in Python2
try: FileNotFoundError
except NameError:
	FileNotFoundError=IOError

class BadProfile(Exception) : pass
class MissingValue(Exception) : pass
_mandatoryKeys = [
	'username',
	'database',
	'password',
	]

def defaultDbConfigFile() :
	import appdirs
	return os.path.join(
		appdirs.user_config_dir(
			appname='dbconfig',
			appauthor='somenergia',
			version='1.0',
			),
			'dbconfig.yaml',
		)

def generateDefault(configfile) :
	data=namespace(
			default=namespace(
				(key,None) for key in _mandatoryKeys
			))
	data.dump(configfile)
	return data

def dbconfig(configfile=None, profile=None, ):
	profile = profile or os.environ.get('SE_DATABASE', 'default')
	if not configfile : configfile = defaultDbConfigFile()
	try :
		data = namespace.load(configfile)
	except FileNotFoundError:
		error("Database configuration file not available, generating a default one at '{}'".format(configfile))
		data = generateDefault(configfile)
		raise FileNotFoundError
	try:
		result = data[profile]
	except KeyError:
		message = ("Database profile '{}' not availabe in '{}'"
			.format(profile, configfile) + (", try with: "+
				(", ".join(sorted(data.keys()))) if data else ""))
		error(message)
		raise BadProfile(message)
	for key in _mandatoryKeys:
		if key not in result or not result[key] :
			raise MissingValue(key)
	return result


import unittest
class dbconfig_test(unittest.TestCase):
	def addFile(self, file) :
		self.toRemove.append(file)
	def setUp(self) :
		self.toRemove=[]
		self.data = namespace(
			default = namespace(
				(key, 'my'+key) for key in _mandatoryKeys),
			alternative=namespace(
				(key, 'other'+key) for key in _mandatoryKeys),
			)
		self.data.dump('config.yaml')
		self.addFile('config.yaml')

	def tearDown(self):
		for f in self.toRemove:
			try: os.unlink(f)
			except FileNotFoundError: pass

	def test_dbconfig_notExistingConfigFile(self) :
		self.addFile('nonexistingconfig')
		with self.assertRaises(FileNotFoundError) :
			dbconfig(configfile='nonexistingconfig')
		autogenerated = namespace.load('nonexistingconfig')
		self.assertDictEqual(
			dict(
				default=dict(
					username=None,
					database=None,
					password=None,
				)),
			autogenerated)

	def test_dbconfig_takesDefaultData(self) :
		config=dbconfig(configfile='config.yaml')
		self.assertDictEqual(config, self.data.default)

	def test_dbconfig_explicitConfig_takesAlternativeData(self) :
		config=dbconfig(profile='alternative',configfile='config.yaml')
		self.assertDictEqual(config, self.data.alternative)

	def test_dbconfig_explicitConfig_takesAlternativeData(self) :
		with self.assertRaises(BadProfile) as e:
			dbconfig(profile='badprofile',configfile='config.yaml')
		self.assertEqual(str(e.exception.args[0]),
			"Database profile 'badprofile' not availabe in 'config.yaml', "
			"try with: alternative, default"
			)

	def test_dbconfig_environment_takesAlternativeData(self) :
		os.environ['SE_DATABASE']='alternative'
		config=dbconfig(configfile='config.yaml')
		self.assertDictEqual(config, self.data.alternative)
		del os.environ['SE_DATABASE']

	def test_defaultDbConfigFile_linux(self) :
		self.assertEqual(
			os.path.join(
				os.environ['HOME'],
				'.config',
#				'somenergia',
				'dbconfig',
				'1.0',
				'dbconfig.yaml',
			),
			defaultDbConfigFile())


if __name__ == '__main__':
	import sys
	sys.exit(unittest.main())


